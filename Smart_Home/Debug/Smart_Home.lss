
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001290  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a48  00000000  00000000  0000176c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b60  00000000  00000000  000021b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000264  00000000  00000000  00002d14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000682  00000000  00000000  00002f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c76  00000000  00000000  000035fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00004270  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  64:	0c 94 4f 01 	jmp	0x29e	; 0x29e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <asmh_initSpi>:
/************************************************************************/

static void asmh_initSpi(u8_t au8_spiMode)
{
	/* Check whether the SPI Mode is in the MASTER mode */
	if (au8_spiMode == ASMH_SPIM_MASTER)
  6c:	81 11       	cpse	r24, r1
  6e:	11 c0       	rjmp	.+34     	; 0x92 <asmh_initSpi+0x26>
	{
		/* Set PB5 (MOSI) and PB7 (SCK) to OUTPUT */
		mdio_setPinStatus(PORTB, (PIN5|PIN7), OUTPUT);
  70:	42 e0       	ldi	r20, 0x02	; 2
  72:	60 ea       	ldi	r22, 0xA0	; 160
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	0e 94 b3 00 	call	0x166	; 0x166 <mdio_setPinStatus>
		
		/* Set PA0 (SS) to OUTPUT */
		mdio_setPinStatus(PORTA, (PIN0), OUTPUT);
  7a:	42 e0       	ldi	r20, 0x02	; 2
  7c:	61 e0       	ldi	r22, 0x01	; 1
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	0e 94 b3 00 	call	0x166	; 0x166 <mdio_setPinStatus>
		
		/* Set PB6 (MISO) to INPUT */
		mdio_setPinStatus(PORTB, (PIN6), INPUT_FLOAT);
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	60 e4       	ldi	r22, 0x40	; 64
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	0e 94 b3 00 	call	0x166	; 0x166 <mdio_setPinStatus>
		
		/* Initialize the SPI module in MASTER mode */
		au8_spiMode = MSPI_MODE_MASTER;
  8e:	80 e1       	ldi	r24, 0x10	; 16
  90:	10 c0       	rjmp	.+32     	; 0xb2 <asmh_initSpi+0x46>
	}
	else
	{
		/* Set PB5 (MOSI) and PB7 (SCK) to INPUT_FLOAT */
		mdio_setPinStatus(PORTB, (PIN5|PIN7), INPUT_FLOAT);
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	60 ea       	ldi	r22, 0xA0	; 160
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	0e 94 b3 00 	call	0x166	; 0x166 <mdio_setPinStatus>
		
		/* Set PA0 (SS) to INPUT */
		mdio_setPinStatus(PORTA, (PIN0), INPUT_FLOAT);
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	0e 94 b3 00 	call	0x166	; 0x166 <mdio_setPinStatus>
		
		/* Set PB6 (MISO) to OUTPUT */
		mdio_setPinStatus(PORTB, (PIN6), OUTPUT);
  a6:	42 e0       	ldi	r20, 0x02	; 2
  a8:	60 e4       	ldi	r22, 0x40	; 64
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	0e 94 b3 00 	call	0x166	; 0x166 <mdio_setPinStatus>
		
		/* Initialize the SPI module in SLAVE mode */
		au8_spiMode = MSPI_MODE_SLAVE;
  b0:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	/* Initialize the SPI module with MSB data mode, Sample on rising and setup on falling and clock speed of 16 */
	mspi_init(au8_spiMode, MSPI_DMODE_MSB, MSPI_CMODE_SAMPLE_R_SETUP_F, MSPI_CLK_BY_16);
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	0e 94 1c 01 	call	0x238	; 0x238 <mspi_init>
  bc:	08 95       	ret

000000be <asmh_initApp>:
}

void asmh_initApp(u8_t au8_mode)
{
  be:	cf 93       	push	r28
  c0:	c8 2f       	mov	r28, r24
	/* Initialize SPI module */
	asmh_initSpi(au8_mode);
  c2:	0e 94 36 00 	call	0x6c	; 0x6c <asmh_initSpi>
	
	/* Check whether the SPI Mode is in the MASTER mode */
	if (au8_mode == ASMH_SPIM_MASTER)
  c6:	c1 11       	cpse	r28, r1
  c8:	03 c0       	rjmp	.+6      	; 0xd0 <asmh_initApp+0x12>
	{
		/* Initialize the Bluetooth module */
		hbth_init();
  ca:	0e 94 78 00 	call	0xf0	; 0xf0 <hbth_init>
  ce:	06 c0       	rjmp	.+12     	; 0xdc <asmh_initApp+0x1e>
	}
	else
	{
		/* Initialize the LED1 in the LED module */
		hled_init(HLED_LED1);
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	0e 94 8c 00 	call	0x118	; 0x118 <hled_init>
		
		/* Initialize the LED 2 in the LED module */
		hled_init(HLED_LED2);
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	0e 94 8c 00 	call	0x118	; 0x118 <hled_init>
	}
	/* Return from this function */
	return;
}
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <asmh_masterBTHRecvCmd>:

void asmh_masterBTHRecvCmd(u8_t* pu8_cmd)
{
	/* Receive a command over the Bluetooth module */
	hbth_recvCmd(pu8_cmd);
  e0:	0e 94 89 00 	call	0x112	; 0x112 <hbth_recvCmd>
  e4:	08 95       	ret

000000e6 <asmh_masterSPISendCmd>:
}

void asmh_masterSPISendCmd(u8_t au8_cmd)
{
	/* Send the 1-byte data from the MASTER to the SLAVE with ignoring the received data from the SLAVE */
	mspi_masterSendRecvByte(au8_cmd, 0x00);
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	0e 94 27 01 	call	0x24e	; 0x24e <mspi_masterSendRecvByte>
  ee:	08 95       	ret

000000f0 <hbth_init>:
/*                         Functions' definitions                       */
/************************************************************************/
void hbth_init(void)
{
	/* Set the RX pin as input */
	mdio_setPinStatus(PORTD, PIN0, INPUT_FLOAT);
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	61 e0       	ldi	r22, 0x01	; 1
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	0e 94 b3 00 	call	0x166	; 0x166 <mdio_setPinStatus>
	
	/* Set the TX pin as output */
	mdio_setPinStatus(PORTD, PIN1, OUTPUT);
  fa:	42 e0       	ldi	r20, 0x02	; 2
  fc:	62 e0       	ldi	r22, 0x02	; 2
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	0e 94 b3 00 	call	0x166	; 0x166 <mdio_setPinStatus>
	
	/* Initialize the UART module with 9600 baud rate */
	muart_init(MUART_BAUDRATE_9600);
 104:	87 e6       	ldi	r24, 0x67	; 103
 106:	0e 94 37 01 	call	0x26e	; 0x26e <muart_init>
 10a:	08 95       	ret

0000010c <hbth_dataExists>:
}

u8_t hbth_dataExists(void)
{
	/* Return whether there is a new data exists or not */
	return muart_dataExists();
 10c:	0e 94 3e 01 	call	0x27c	; 0x27c <muart_dataExists>
}
 110:	08 95       	ret

00000112 <hbth_recvCmd>:

void hbth_recvCmd(u8_t* pu8_dataByte)
{
	/* Return the received data */
	muart_recvByte(pu8_dataByte);
 112:	0e 94 43 01 	call	0x286	; 0x286 <muart_recvByte>
 116:	08 95       	ret

00000118 <hled_init>:
/*                         Functions' definitions                       */
/************************************************************************/

void hled_init(u8_t au8_led)
{
	switch (au8_led)
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	19 f0       	breq	.+6      	; 0x122 <hled_init+0xa>
 11c:	82 30       	cpi	r24, 0x02	; 2
 11e:	39 f0       	breq	.+14     	; 0x12e <hled_init+0x16>
 120:	08 95       	ret
	{
		/* In case of LED1 */
		case HLED_LED1:
			/* Set PD0 to OUTPUT */
			mdio_setPinStatus(PORTD, PIN0, OUTPUT);
 122:	42 e0       	ldi	r20, 0x02	; 2
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	83 e0       	ldi	r24, 0x03	; 3
 128:	0e 94 b3 00 	call	0x166	; 0x166 <mdio_setPinStatus>
		
			/* Break from this case */
			break;
 12c:	08 95       	ret
		/* In case of LED2 */
		case HLED_LED2:
			/* Set PD1 to OUTPUT */
			mdio_setPinStatus(PORTD, PIN1, OUTPUT);
 12e:	42 e0       	ldi	r20, 0x02	; 2
 130:	62 e0       	ldi	r22, 0x02	; 2
 132:	83 e0       	ldi	r24, 0x03	; 3
 134:	0e 94 b3 00 	call	0x166	; 0x166 <mdio_setPinStatus>
 138:	08 95       	ret

0000013a <main>:
 * @brief  Main function
 *
 * @return int 0 on successful execution of the program, anything else on errors
 */
int main(void)
{
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	1f 92       	push	r1
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
	/* If the output compiled version is going to be for the MASTER microcontroller */
	#if defined MASTER_VERSION
		/* A local variable to store the received data over the Bluetooth module */
		u8_t au8_BthData = 0;
 144:	19 82       	std	Y+1, r1	; 0x01
		
		/* Initialize the application is MASTER mode */
		asmh_initApp(ASMH_SPIM_MASTER);
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 5f 00 	call	0xbe	; 0xbe <asmh_initApp>
    while (1)
    {
		/* If the output compiled version is going to be for the MASTER microcontroller */
		#if defined MASTER_VERSION
			/* Checking whether there is a new received data */
			if (hbth_dataExists())
 14c:	0e 94 86 00 	call	0x10c	; 0x10c <hbth_dataExists>
 150:	88 23       	and	r24, r24
 152:	e1 f3       	breq	.-8      	; 0x14c <main+0x12>
			{
				/* Get and store the received data over the Bluetooth module */
				asmh_masterBTHRecvCmd(&au8_BthData);
 154:	ce 01       	movw	r24, r28
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	0e 94 70 00 	call	0xe0	; 0xe0 <asmh_masterBTHRecvCmd>
				
				/* Send the received Bluetooth data to the SLAVE over the SPI */
				asmh_masterSPISendCmd(au8_BthData);
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	0e 94 73 00 	call	0xe6	; 0xe6 <asmh_masterSPISendCmd>
				
				/* Reset the received data over the Bluetooth module so it doesn't cause issues */
				au8_BthData = 0;
 162:	19 82       	std	Y+1, r1	; 0x01
 164:	f3 cf       	rjmp	.-26     	; 0x14c <main+0x12>

00000166 <mdio_setPinStatus>:
/************************************************************************/

void mdio_setPinStatus(u8_t au8_port, u8_t au8_pin, u8_t au8_pinStatus)
{
	/* Switching over the DIO ports */
	switch(au8_port)
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	f9 f0       	breq	.+62     	; 0x1a8 <mdio_setPinStatus+0x42>
 16a:	30 f0       	brcs	.+12     	; 0x178 <mdio_setPinStatus+0x12>
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	a1 f1       	breq	.+104    	; 0x1d8 <mdio_setPinStatus+0x72>
 170:	83 30       	cpi	r24, 0x03	; 3
 172:	09 f4       	brne	.+2      	; 0x176 <mdio_setPinStatus+0x10>
 174:	49 c0       	rjmp	.+146    	; 0x208 <mdio_setPinStatus+0xa2>
 176:	08 95       	ret
	{
		/* In case of PORTA */
		case PORTA:
			/* Switching over pin status */
			switch(au8_pinStatus)
 178:	41 30       	cpi	r20, 0x01	; 1
 17a:	49 f0       	breq	.+18     	; 0x18e <mdio_setPinStatus+0x28>
 17c:	18 f0       	brcs	.+6      	; 0x184 <mdio_setPinStatus+0x1e>
 17e:	42 30       	cpi	r20, 0x02	; 2
 180:	79 f0       	breq	.+30     	; 0x1a0 <mdio_setPinStatus+0x3a>
 182:	08 95       	ret
			{
				/* In case of input float */
				case INPUT_FLOAT:
					/* Clearing the corresponding pin in DDRA register */
					MDIO_DDRA &= ~au8_pin;
 184:	8a b3       	in	r24, 0x1a	; 26
 186:	60 95       	com	r22
 188:	68 23       	and	r22, r24
 18a:	6a bb       	out	0x1a, r22	; 26
					break;
 18c:	08 95       	ret
				/* In case of input pull up */
				case INPUT_PULLUP:
					/* Clearing the corresponding pin in DDRA register */
					MDIO_DDRA &= ~au8_pin;
 18e:	8a b3       	in	r24, 0x1a	; 26
 190:	96 2f       	mov	r25, r22
 192:	90 95       	com	r25
 194:	89 23       	and	r24, r25
 196:	8a bb       	out	0x1a, r24	; 26
					/*  Setting the corresponding bits in PORTA register */
					MDIO_PORTA |= au8_pin;
 198:	8b b3       	in	r24, 0x1b	; 27
 19a:	68 2b       	or	r22, r24
 19c:	6b bb       	out	0x1b, r22	; 27
					break;
 19e:	08 95       	ret
				/* In case of output */
				case OUTPUT:
					/*  Setting the corresponding bits in PORTA register */
					MDIO_DDRA |= au8_pin;
 1a0:	8a b3       	in	r24, 0x1a	; 26
 1a2:	68 2b       	or	r22, r24
 1a4:	6a bb       	out	0x1a, r22	; 26
					break;
 1a6:	08 95       	ret
			}
			break;
		/* In case of PORTB */
		case PORTB:
			/* Switching over pin status */
			switch(au8_pinStatus)
 1a8:	41 30       	cpi	r20, 0x01	; 1
 1aa:	49 f0       	breq	.+18     	; 0x1be <mdio_setPinStatus+0x58>
 1ac:	18 f0       	brcs	.+6      	; 0x1b4 <mdio_setPinStatus+0x4e>
 1ae:	42 30       	cpi	r20, 0x02	; 2
 1b0:	79 f0       	breq	.+30     	; 0x1d0 <mdio_setPinStatus+0x6a>
 1b2:	08 95       	ret
			{
				/* In case of input float */
				case INPUT_FLOAT:
					/* Clearing the corresponding pin in DDRB register */
					MDIO_DDRB &= ~au8_pin;
 1b4:	87 b3       	in	r24, 0x17	; 23
 1b6:	60 95       	com	r22
 1b8:	68 23       	and	r22, r24
 1ba:	67 bb       	out	0x17, r22	; 23
					break;
 1bc:	08 95       	ret
				/* In case of input pull up */
				case INPUT_PULLUP:
					/* Clearing the corresponding pin in DDRB register */
					MDIO_DDRB &= ~au8_pin;
 1be:	87 b3       	in	r24, 0x17	; 23
 1c0:	96 2f       	mov	r25, r22
 1c2:	90 95       	com	r25
 1c4:	89 23       	and	r24, r25
 1c6:	87 bb       	out	0x17, r24	; 23
					/*  Setting the corresponding bits in PORTB register */
					MDIO_PORTB |= au8_pin;
 1c8:	88 b3       	in	r24, 0x18	; 24
 1ca:	68 2b       	or	r22, r24
 1cc:	68 bb       	out	0x18, r22	; 24
					break;
 1ce:	08 95       	ret
				/* In case of output */
				case OUTPUT:
					/*  Setting the corresponding bits in PORTB register */
					MDIO_DDRB |= au8_pin;
 1d0:	87 b3       	in	r24, 0x17	; 23
 1d2:	68 2b       	or	r22, r24
 1d4:	67 bb       	out	0x17, r22	; 23
					break;
 1d6:	08 95       	ret
			}
			break;
		/* In case of PORTC */
		case PORTC:
			/* Switching over pin status */
			switch(au8_pinStatus)
 1d8:	41 30       	cpi	r20, 0x01	; 1
 1da:	49 f0       	breq	.+18     	; 0x1ee <mdio_setPinStatus+0x88>
 1dc:	18 f0       	brcs	.+6      	; 0x1e4 <mdio_setPinStatus+0x7e>
 1de:	42 30       	cpi	r20, 0x02	; 2
 1e0:	79 f0       	breq	.+30     	; 0x200 <mdio_setPinStatus+0x9a>
 1e2:	08 95       	ret
			{
				/* In case of input float */
				case INPUT_FLOAT:
					/* Clearing the corresponding pin in DDRA register */
					MDIO_DDRC &= ~au8_pin;
 1e4:	84 b3       	in	r24, 0x14	; 20
 1e6:	60 95       	com	r22
 1e8:	68 23       	and	r22, r24
 1ea:	64 bb       	out	0x14, r22	; 20
					break;
 1ec:	08 95       	ret
				/* In case of input pull up */
				case INPUT_PULLUP:
					/* Clearing the corresponding pin in DDRA register */
					MDIO_DDRC &= ~au8_pin;
 1ee:	84 b3       	in	r24, 0x14	; 20
 1f0:	96 2f       	mov	r25, r22
 1f2:	90 95       	com	r25
 1f4:	89 23       	and	r24, r25
 1f6:	84 bb       	out	0x14, r24	; 20
					/*  Setting the corresponding bits in PORTC register */
					MDIO_PORTC |= au8_pin;
 1f8:	85 b3       	in	r24, 0x15	; 21
 1fa:	68 2b       	or	r22, r24
 1fc:	65 bb       	out	0x15, r22	; 21
					break;
 1fe:	08 95       	ret
				/* In case of output */
				case OUTPUT:
					/*  Setting the corresponding bits in PORTC register */
					MDIO_DDRC |= au8_pin;
 200:	84 b3       	in	r24, 0x14	; 20
 202:	68 2b       	or	r22, r24
 204:	64 bb       	out	0x14, r22	; 20
					break;
 206:	08 95       	ret
			}
			break;
		/* In case of PORTD */
		case PORTD:
			/* Switching over pin status */
			switch(au8_pinStatus)
 208:	41 30       	cpi	r20, 0x01	; 1
 20a:	49 f0       	breq	.+18     	; 0x21e <mdio_setPinStatus+0xb8>
 20c:	18 f0       	brcs	.+6      	; 0x214 <mdio_setPinStatus+0xae>
 20e:	42 30       	cpi	r20, 0x02	; 2
 210:	79 f0       	breq	.+30     	; 0x230 <mdio_setPinStatus+0xca>
 212:	08 95       	ret
			{
				/* In case of input float */
				case INPUT_FLOAT:
					/* Clearing the corresponding pin in DDRD register */
					MDIO_DDRD &= ~au8_pin;
 214:	81 b3       	in	r24, 0x11	; 17
 216:	60 95       	com	r22
 218:	68 23       	and	r22, r24
 21a:	61 bb       	out	0x11, r22	; 17
					break;
 21c:	08 95       	ret
				/* In case of input pull up */
				case INPUT_PULLUP:
					/* Clearing the corresponding pin in DDRD register */
					MDIO_DDRD &= ~au8_pin;
 21e:	81 b3       	in	r24, 0x11	; 17
 220:	96 2f       	mov	r25, r22
 222:	90 95       	com	r25
 224:	89 23       	and	r24, r25
 226:	81 bb       	out	0x11, r24	; 17
					/*  Setting the corresponding bits in PORTD register */
					MDIO_PORTD |= au8_pin;
 228:	82 b3       	in	r24, 0x12	; 18
 22a:	68 2b       	or	r22, r24
 22c:	62 bb       	out	0x12, r22	; 18
					break;
 22e:	08 95       	ret
				/* In case of output */
				case OUTPUT:
					/*  Setting the corresponding bits in PORTD register */
					MDIO_DDRD |= au8_pin;
 230:	81 b3       	in	r24, 0x11	; 17
 232:	68 2b       	or	r22, r24
 234:	61 bb       	out	0x11, r22	; 17
 236:	08 95       	ret

00000238 <mspi_init>:
/*                         Functions' definitions                       */
/************************************************************************/
void mspi_init(u8_t au8_spiMode, u8_t au8_dataOutMode, u8_t au8_clockMode, u8_t au8_spiSpeed)
{
	/* Enable the SPI mode, set the data out mode, SPI mode, clock mode & SPI speed */
	MSPI_SPCR = (0x40) | au8_dataOutMode | au8_spiMode | au8_clockMode | au8_spiSpeed;
 238:	86 2b       	or	r24, r22
 23a:	48 2b       	or	r20, r24
 23c:	42 2b       	or	r20, r18
 23e:	40 64       	ori	r20, 0x40	; 64
 240:	4d b9       	out	0x0d, r20	; 13
	
	/* (En/Dis)able the SPI2X bit based on the SPI speed */
	MSPI_SPSR = (au8_spiSpeed >> 6);
 242:	22 95       	swap	r18
 244:	26 95       	lsr	r18
 246:	26 95       	lsr	r18
 248:	23 70       	andi	r18, 0x03	; 3
 24a:	2e b9       	out	0x0e, r18	; 14
 24c:	08 95       	ret

0000024e <mspi_masterSendRecvByte>:
{
	/* Local variable for timing out operation */
	u8_t au8_timeOut = 0;
	
	/* Send the new data through SPI bus from master to slave */
	MSPI_SPDR = au8_sendData;
 24e:	8f b9       	out	0x0f, r24	; 15
}

void mspi_masterSendRecvByte(u8_t au8_sendData, u8_t* pu8_recvData)
{
	/* Local variable for timing out operation */
	u8_t au8_timeOut = 0;
 250:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Send the new data through SPI bus from master to slave */
	MSPI_SPDR = au8_sendData;
	
	/* Wait for the data to be transmitted or a timeout occurs */
	while ((!GET_BIT(MSPI_SPSR, 7)) && (au8_timeOut < TIMEOUT_DELAY))
 252:	05 c0       	rjmp	.+10     	; 0x25e <mspi_masterSendRecvByte+0x10>
	{
		/* Increase the timeout variable */
		au8_timeOut++;
 254:	8f 5f       	subi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	95 e0       	ldi	r25, 0x05	; 5
 258:	9a 95       	dec	r25
 25a:	f1 f7       	brne	.-4      	; 0x258 <mspi_masterSendRecvByte+0xa>
 25c:	00 00       	nop
	
	/* Send the new data through SPI bus from master to slave */
	MSPI_SPDR = au8_sendData;
	
	/* Wait for the data to be transmitted or a timeout occurs */
	while ((!GET_BIT(MSPI_SPSR, 7)) && (au8_timeOut < TIMEOUT_DELAY))
 25e:	77 99       	sbic	0x0e, 7	; 14
 260:	02 c0       	rjmp	.+4      	; 0x266 <mspi_masterSendRecvByte+0x18>
 262:	84 36       	cpi	r24, 0x64	; 100
 264:	b8 f3       	brcs	.-18     	; 0x254 <mspi_masterSendRecvByte+0x6>
		/* Delay for 1us */
		_delay_us(1);
	}
	
	/* Return the received data from the slave to the master */
	*pu8_recvData = MSPI_SPDR;
 266:	8f b1       	in	r24, 0x0f	; 15
 268:	fb 01       	movw	r30, r22
 26a:	80 83       	st	Z, r24
 26c:	08 95       	ret

0000026e <muart_init>:
		muart_sendByte(pu8_dataStream[au8_index]);
	}
	
	/* Return from this function */
	return;
}
 26e:	98 e1       	ldi	r25, 0x18	; 24
 270:	9a b9       	out	0x0a, r25	; 10
 272:	96 e8       	ldi	r25, 0x86	; 134
 274:	90 bd       	out	0x20, r25	; 32
 276:	89 b9       	out	0x09, r24	; 9
 278:	10 bc       	out	0x20, r1	; 32
 27a:	08 95       	ret

0000027c <muart_dataExists>:

u8_t muart_dataExists(void)
{
	return (u8_t) GET_BIT(MUART_UCSRA, 7);
 27c:	8b b1       	in	r24, 0x0b	; 11
}
 27e:	88 1f       	adc	r24, r24
 280:	88 27       	eor	r24, r24
 282:	88 1f       	adc	r24, r24
 284:	08 95       	ret

00000286 <muart_recvByte>:

void muart_recvByte(u8_t* pu8_dataByte)
{
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	ec 01       	movw	r28, r24
	/* Checking if there's any received data in UDR register */
	if (muart_dataExists())
 28c:	0e 94 3e 01 	call	0x27c	; 0x27c <muart_dataExists>
 290:	88 23       	and	r24, r24
 292:	11 f0       	breq	.+4      	; 0x298 <muart_recvByte+0x12>
	{
		/* Store the received data */
		*pu8_dataByte = MUART_UDR;
 294:	8c b1       	in	r24, 0x0c	; 12
 296:	88 83       	st	Y, r24
		/* Do nothing */
	}
	
	/* Return from this function */
	return;
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <_exit>:
 29e:	f8 94       	cli

000002a0 <__stop_program>:
 2a0:	ff cf       	rjmp	.-2      	; 0x2a0 <__stop_program>
